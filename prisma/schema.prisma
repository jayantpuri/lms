// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String   @id @default(uuid())
  userId      String
  title       String   @db.Text
  description String?  @db.Text
  price       Float?
  imageUrl    String?  @db.Text
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId  String?
  attachments Attachment[]
  purchases   Purchase[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]

  @@index(categoryId)
  @@fulltext([title])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index(courseId)
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  position    Int
  isFree      Boolean? @default(false)
  isPublished Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId     String
  userProgress UserProgress[]
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  playbackId String?
  assetId    String
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId, userId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
